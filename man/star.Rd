% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/common_configurations.R
\name{star}
\alias{star}
\alias{ring}
\alias{subgroup}
\alias{subgroup_all}
\title{Create common configurations}
\usage{
star(
  n,
  group_size = max(n),
  mode = c("mutual", "in", "out"),
  loops = FALSE,
  value = 1L
)

ring(
  n,
  group_size = max(n),
  mode = c("mutual", "in", "out"),
  loops = FALSE,
  value = 1L
)

subgroup(
  ...,
  group_size = NULL,
  mode = c("mutual", "in", "out"),
  relation = c("within", "between"),
  loops = FALSE,
  value = 1L
)

subgroup_all(
  n,
  group_size = max(n),
  min_size = 2,
  mode = c("mutual", "in", "out"),
  relation = c("within", "between"),
  loops = FALSE,
  value = 1L
)
}
\arguments{
\item{n}{Scalar or vector for the number vertices with edges.}

\item{group_size}{Size of the group.}

\item{mode}{Can be \code{"mutual"}, \code{"in"}, or \code{"out"}: for edge \emph{(i, j)} and
matrix \emph{M}, \code{"out"} creates edge \emph{M\link{i, j}}, \code{"in"} creates
edge \emph{M\link{j, i}}, and \code{"mutual"} creates both.}

\item{loops}{When \code{FALSE}, diagonal values are set to \code{NA}.}

\item{value}{Edge value (or weight) to set.}

\item{...}{One or more vectors of subgroup sizes. If \code{relation = "between"}, at least
two numbers or vectors are required.}

\item{relation}{Specifies whether edges are \code{"within"} or \code{"between"} subgroups.
Default is \code{"within"}.}

\item{min_size}{Smallest subgroup size allowed. Default is 2.}
}
\value{
A \code{configuration_set} object.
}
\description{
\code{star} creates one or more configurations in which \emph{n - 1}
vertices are connected to the first vertex.

\code{ring} creates one or more configurations in which vertices are serially
connected.

\code{subgroup} creates one or more configurations in which vertices are
connected within or between subgroups.

\code{subgroup_all} creates all possible subgroup configurations for \code{n}
vertices.
}
\examples{
star(4)
star(2:4, 6)
ring(4)
ring(2:4, 6)
subgroup(4)
subgroup(2, 4)
subgroup(2:4)
subgroup(2, 2:4, 3)
subgroup(2, 4, group_size = 8, relation = "between")
subgroup_all(6)
subgroup_all(6, relation = "between")
subgroup_all(6, group_size = 8)
}
