// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// best_combination
IntegerVector best_combination(NumericVector Rw, NumericVector Rf, IntegerVector Rv, bool loops, bool prod);
RcppExport SEXP _SmallGroupNetwork_best_combination(SEXP RwSEXP, SEXP RfSEXP, SEXP RvSEXP, SEXP loopsSEXP, SEXP prodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Rw(RwSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rf(RfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Rv(RvSEXP);
    Rcpp::traits::input_parameter< bool >::type loops(loopsSEXP);
    Rcpp::traits::input_parameter< bool >::type prod(prodSEXP);
    rcpp_result_gen = Rcpp::wrap(best_combination(Rw, Rf, Rv, loops, prod));
    return rcpp_result_gen;
END_RCPP
}
// test_rcpp
void test_rcpp();
RcppExport SEXP _SmallGroupNetwork_test_rcpp() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_rcpp();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SmallGroupNetwork_best_combination", (DL_FUNC) &_SmallGroupNetwork_best_combination, 5},
    {"_SmallGroupNetwork_test_rcpp", (DL_FUNC) &_SmallGroupNetwork_test_rcpp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SmallGroupNetwork(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
